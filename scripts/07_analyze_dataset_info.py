'''
Author: ChatGPT, Wei Qin
Date: 2024-01-05
Description:
    Count the number of labels and the label size ratios of per class.
    Partially generated by ChatGPT and edited by me.
Update Log:
    2024-01-05: File created.

'''

from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
import os
import time
import xml.etree.ElementTree as ET

import matplotlib.pyplot as plt
from tqdm import tqdm


def process_xml(xml_path, size_ratio):
    '''
    Single xml file parsing process. 

    Args:
        xml_path (string): Path of xml file.
        size_ratio (boolean): Weather to count label size ratio. 

    Returns:
        label_counts (dict): Label distribution.
        label_ratios (dict): Label size distribution. 
    '''
    label_counts = defaultdict(int)
    label_ratios = defaultdict(lambda: {'height': [], 'width': []})

    if not os.path.isdir(xml_path):
        tree = ET.parse(xml_path)
        root = tree.getroot()

        if size_ratio:
            size = root.find('size')
            im_w = int(size.find('width').text)
            im_h = int(size.find('height').text)

        for obj in root.iter('object'):
            name = obj.find('name').text
            label_counts[name] += 1

            if size_ratio:
                bbox = obj.find('bndbox')
                xmin = int(bbox.find('xmin').text)
                ymin = int(bbox.find('ymin').text)
                xmax = int(bbox.find('xmax').text)
                ymax = int(bbox.find('ymax').text)

                h_ratio = (ymax - ymin) / im_h
                w_ratio = (xmax - xmin) / im_w

                label_ratios[name]['height'].append(h_ratio)
                label_ratios[name]['width'].append(w_ratio)

    else:
        pass

    return label_counts, label_ratios


def merge_counts(label_counts, label_ratios, new_lc, new_lr):
    '''
    Merge the results of every xml file for both labels and label ratios.

    Args:
        label_counts (dict): Final label counts.
        label_ratios (dict): Final label size ratios.
        new_lc (dict): New label counts for merging.
        new_lr (dict): New label ratios for merging.

    Returns:
        None.
    '''
    # Merge label counts
    for key, value in new_lc.items():
        label_counts[key] = label_counts.get(key, 0) + value

    # Merge label ratios
    for label, ratios in new_lr.items():
        if label not in label_ratios:
            label_ratios[label] = {'height': [], 'width': []}
        label_ratios[label]['height'].extend(ratios['height'])
        label_ratios[label]['width'].extend(ratios['width'])


def count(xmls, size_ratio):
    '''
    Main process.

    Args:
        xmls (str): XML annotation files' folder. 
        size_ratio (boolean): Weather to count label size ratio. 

    Returns:
        label_counts (dict): Final label counts.
        label_ratios (dict): Final label size ratios.
    '''
    label_counts = {}
    label_ratios = {}

    with ThreadPoolExecutor() as executor:
        futures = [
            executor.submit(process_xml, os.path.join(xmls, xml), size_ratio) 
            for xml in os.listdir(xmls)
        ]
        for future in tqdm(
                as_completed(futures), 
                total=len(futures), 
                desc='Counting'):
            lc, lr = future.result()
            merge_counts(label_counts, label_ratios, lc, lr)

    label_counts = dict(sorted(label_counts.items()))

    return label_counts, label_ratios


def build_results_dir(xmls):
    '''
    Create results saving folder.

    Args:
        xmls (str): XML annotation files' folder.

    Returns:
        save_dir (str): Results folder.
        ratios_dir (str): Ratio results folder.
    '''
    data_dir = os.path.dirname(xmls)
    ratios_dir = None

    t = time.strftime('%Y%m%d_%H%M%S')
    save_dir = os.path.join(data_dir, 'Statistical_Results', t)
    os.makedirs(save_dir, exist_ok=True)

    if size_ratio:
        ratios_dir = os.path.join(save_dir, 'label_size_ratios')
        os.makedirs(ratios_dir, exist_ok=True)

    return save_dir, ratios_dir


def plot_label_counts(label_counts, save_dir):
    '''
    Plot result of label counts.

    Args:
        label_counts (dict): Final label counts.
        save_dir (str): Results folder.

    Returns:
        None.
    '''
    print('Plotting...')
    keys = list(label_counts.keys())
    values = list(label_counts.values())

    bars = plt.bar(keys, values, alpha=0.5)
    for x, y in zip(keys, values):
        plt.text(x, y, y, ha='center', va='bottom')

    plt.xticks(rotation=75)
    plt.ylabel('Counts')
    plt.savefig(
        os.path.join(save_dir, 'label_counts.jpg'), 
        bbox_inches='tight', 
        pad_inches=0.1, 
        dpi=200)
    plt.close()


def plot_label_ratios(label_ratios, ratios_dir):
    '''
    Plot result of label ratios.

    Args:
        label_ratios (dict): Final label size ratios.
        ratios_dir (str): Ratio results folder.

    Returns:
        None.
    '''
    color = {'height': None, 'width': 'red'}
    for label, ratios in label_ratios.items():
        # Plot histogram for height / width ratios
        for key in ratios.keys(): # key: height, width
            plt.hist(
                ratios[key], 
                bins=20, 
                alpha=0.5, 
                color=color[key], 
                label='Ratio Counts')
            plt.xlabel('Ratio')
            plt.ylabel('Counts')
            plt.legend()
            plt.savefig(
                os.path.join(ratios_dir, f'{label}_{key}_ratios.jpg'), 
                bbox_inches='tight', 
                pad_inches=0.1, 
                dpi=200)
            plt.close()


if __name__ == '__main__':
    # Setting parameters
    xmls = 'path/of/annotation/folder'
    size_ratio = True # Weather to count label size ratio. 

    # Main process
    label_counts, label_ratios = count(xmls, size_ratio)
    save_dir, ratios_dir = build_results_dir(xmls)
    plot_label_counts(label_counts, save_dir)
    if size_ratio:
        plot_label_ratios(label_ratios, ratios_dir)
    print(f'Counting completed.\nCounting result(s) saved at {save_dir}.')
