'''
Author: Wei Qin, ChatGPT
Date: 2024-01-05
Description:
    Count the number of labels and the label size ratios of per class.
    Partially generated by ChatGPT and edited by me.
Update Log:
    2024-01-05: File created.
    2024-01-05: Added / changed some comments and changed file name.
    2024-01-08: Added a new feature for counting small objects.

'''

from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
import os
import time
import xml.etree.ElementTree as ET

import matplotlib.pyplot as plt
from tqdm import tqdm


def process_xml(params, xml):
    '''
    Single xml file parsing process.

    Args:
        params (dict): Parameters.
        xml (string): XML file name.

    Returns:
        lc (dict): Label counts.
        lr (dict): Label size ratios.
        sc (dict): Small-object counts.
    '''
    lc = defaultdict(int)
    lr = defaultdict(lambda: {'height': [], 'width': []})
    sc = {f'{x}x{x}': [] for x in params['small_range']}

    xml_path = os.path.join(params['xmls'], xml)

    if os.path.isdir(xml_path):
        return lc, lr, sc

    tree = ET.parse(xml_path)
    root = tree.getroot()

    if params['size_ratio']:
        size = root.find('size')
        im_w = int(size.find('width').text)
        im_h = int(size.find('height').text)

    for obj in root.iter('object'):
        name = obj.find('name').text
        lc[name] += 1

        if params['size_ratio'] or params['small_object']:
            bbox = obj.find('bndbox')
            xmin, ymin, xmax, ymax = (int(bbox.find(pos).text) for pos in [
                                      'xmin', 'ymin', 'xmax', 'ymax'])

            if params['size_ratio']:
                h_ratio = (ymax - ymin) / im_h
                w_ratio = (xmax - xmin) / im_w
                lr[name]['height'].append(h_ratio)
                lr[name]['width'].append(w_ratio)

            if params['small_object']:
                obj_size = (xmax - xmin, ymax - ymin)
                for i in params['small_range']:
                    if obj_size[0] < i and obj_size[1] < i:
                        sc[f'{i}x{i}'].append(xml)

    return lc, lr, sc


def merge_counts(lc, lr, sc, new_lc, new_lr, new_sc):
    '''
    Merge the results of all XML files for label counts,
    label ratios and small-object counts.

    Args:
        lc (dict): Final result of label counts.
        lr (dict): Final result of label size ratios.
        sc (dict): Final result of small-object counts.
        new_lc (dict): New label counts for merging.
        new_lr (dict): New label ratios for merging.
        new_sc (dict): New small-object counts for merging.

    Returns:
        None.
    '''
    # Merge label counts
    for key, value in new_lc.items():
        lc[key] = lc.get(key, 0) + value

    # Merge label ratios
    for label, ratios in new_lr.items():
        if label not in lr:
            lr[label] = {'height': [], 'width': []}
        lr[label]['height'].extend(ratios['height'])
        lr[label]['width'].extend(ratios['width'])

    # Merge small-object counts
    for sr, count in new_sc.items():
        sc[sr].extend(count)


def count(params):
    '''
    Main process of counting labels.

    Args:
        params (dict): Parameters.

    Returns:
        lc (dict): Final result of label counts.
        lr (dict): Final result of label size ratios.
        sc (dict): Final result of small-object counts.
    '''
    lc = {}
    lr = {}
    sc = {f'{x}x{x}': [] for x in params['small_range']}

    # Process each XML file in parallel
    with ThreadPoolExecutor() as executor:
        futures = [
            executor.submit(process_xml, params, xml)
            for xml in os.listdir(params['xmls'])
        ]
        for future in tqdm(
                as_completed(futures),
                total=len(futures),
                desc='Counting'):
            new_lc, new_lr, new_sc = future.result()
            merge_counts(lc, lr, sc, new_lc, new_lr, new_sc)

    lc = dict(sorted(lc.items()))

    return lc, lr, sc


def build_results_dir(params):
    '''
    Create results saving folder.

    Args:
        params (dict): Parameters.

    Returns:
        save_dir (str): Directory to save results.
        ratios_dir (str): Directory of ratio results.
        small_dir (str): Directory of small-objects results.
    '''
    data_dir = os.path.dirname(params['xmls'])
    ratios_dir = small_dir = None

    t = time.strftime('%Y%m%d_%H%M%S')
    save_dir = os.path.join(data_dir, 'Statistical_Results', t)
    os.makedirs(save_dir, exist_ok=True)

    if params['size_ratio']:
        ratios_dir = os.path.join(save_dir, 'label_size_ratios')
        os.makedirs(ratios_dir, exist_ok=True)

    if params['small_object']:
        small_dir = os.path.join(save_dir, 'small_object_counts')
        os.makedirs(small_dir, exist_ok=True)

    return save_dir, ratios_dir, small_dir


def plot_label_counts(lc, save_dir):
    '''
    Plot result of label counts.

    Args:
        lc (dict): Final label counts.
        save_dir (str): Directory to save results.

    Returns:
        None.
    '''
    print('Plotting label counts...')
    keys = list(lc.keys())
    values = list(lc.values())

    bars = plt.bar(keys, values, alpha=0.5)
    for x, y in zip(keys, values):
        plt.text(x, y, y, ha='center', va='bottom')

    plt.title('Label Counts')
    plt.xticks(rotation=75)
    plt.ylabel('Counts')
    plt.savefig(
        os.path.join(save_dir, 'label_counts.jpg'),
        bbox_inches='tight',
        pad_inches=0.1,
        dpi=200)
    plt.close()


def plot_label_ratios(lr, ratios_dir):
    '''
    Plot result of label ratios.

    Args:
        lr (dict): Final label size ratios.
        ratios_dir (str): Directory of ratio results.

    Returns:
        None.
    '''
    print('Plotting label ratios...')
    color = {'height': None, 'width': 'red'}
    for label, ratios in lr.items():
        # Plot histogram for height / width ratios
        for key in ratios.keys():  # key: height, width
            plt.hist(
                ratios[key],
                bins=20,
                alpha=0.5,
                color=color[key],
                label='Ratio Counts')
            plt.title(f'{label} {key} Ratios')
            plt.xlabel('Ratio')
            plt.ylabel('Counts')
            plt.legend()
            plt.savefig(
                os.path.join(ratios_dir, f'{label}_{key}_ratios.jpg'),
                bbox_inches='tight',
                pad_inches=0.1,
                dpi=200)
            plt.close()


def plot_small_counts(sc, small_dir):
    '''
    Plot result of label ratios and save detailed info as txt.

    Args:
        lr (dict): Final label size ratios.
        ratios_dir (str): Directory of ratio results.

    Returns:
        None.
    '''
    print('Plotting small-object counts...')
    cat_num = {f'{x}x{x}': len(sc[f'{x}x{x}']) for x in params['small_range']}
    keys = ['< ' + key for key in cat_num.keys()]
    values = list(cat_num.values())

    bars = plt.bar(keys, values, alpha=0.5)
    for x, y in zip(keys, values):
        plt.text(x, y, y, ha='center', va='bottom')

    plt.title('Small Object Counts')
    plt.ylabel('Counts')
    plt.savefig(
        os.path.join(small_dir, 'small_object_counts.jpg'),
        bbox_inches='tight',
        pad_inches=0.1,
        dpi=200)
    plt.close()

    # Save detailed info
    for x in params['small_range']:
        filename = os.path.join(small_dir, f'smaller_than_{x}x{x}.txt')
        with open(filename, 'w') as f:
            for i in sc[f'{x}x{x}']:
                f.write(i + '\n')


if __name__ == '__main__':
    # Setting parameters
    params = {
        'xmls': 'path/of/xml/files',  # Directory of annotations.
        'size_ratio': True,  # Weather to count label size ratio.
        'small_object': True,  # Weather to count small objects.
        'small_range': [10, 25, 50, 75]  # Count label smaller than 10Ã—10, etc.
    }

    # Main process
    lc, lr, sc = count(params)
    save_dir, ratios_dir, small_dir = build_results_dir(params)
    plot_label_counts(lc, save_dir)
    if params['size_ratio']:
        plot_label_ratios(lr, ratios_dir)
    if params['small_object']:
        plot_small_counts(sc, small_dir)
    print(f'Counting completed.\nCounting result(s) saved at {save_dir}.')
